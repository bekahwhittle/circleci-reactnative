version: 2.1

executors:
  linux:
    docker:
      - image: cimg/base:2020.01
  macos:
    macos:
      xcode: 11.4

jobs:
  build:
    working_directory: ~/demo-react-native
    docker:
      - image: cimg/node:14.10
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

  test:
    parameters:
      os:
        type: executor
      p:
        type: integer
        default: 1
    parallelism: << parameters.p >>
    executor: << parameters.os >>
    steps:
      - checkout


  unit_tests:
    parallelism: 3
    working_directory: ~/demo-react-native
    docker:
      - image: cimg/node:14.10
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
            
      - run: mkdir ~/junit
      - run:
          name: Test application
          command: |
              TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
              yarn test $TEST
      - run:
          command: cp junit.xml ~/junit/
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit            

  android-build-and-test:
    working_directory: ~/demo-react-native/android
    docker:
      - image: circleci/android:api-29-node
    resource_class: large
    steps:
      - checkout:
          path: ~/demo-react-native

      - run:
          name: more dependencies 
          command: |
            yarn add @react-native-community/cli-platform-android@3.0.3
            yarn add react-native@0.61.5

      - attach_workspace:
          at: ~/demo-react-native

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle update

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane test
            mv fastlane/report.xml test-results/fastlane

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  macos-build-and-test:
    working_directory: ~/demo-react-native
    macos:
      xcode: 11.3.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    steps:
      - checkout
      - run: 
          name: Install command line tools
          command: |
            npm install -g react-native-version
            npm install -g react-native-cli
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
      - run: 
          command: pod install
          working_directory: ios
      - run: 
          command: bundle install
          working_directory: ios
      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle
      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE
          working_directory: ios

      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan

  macos-adhoc:
    working_directory: ~/demo-react-native
    macos:
      xcode: 11.3.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
    
      - run: 
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
          - vendor/bundle
      - run: 
          command: pod install
          working_directory: ios

workflows:
  ### ANDROID WORKFLOW ###
  android-build-test: 
    jobs:
      - build
      - test:
          matrix:
            parameters:
              p: [3, 6, 9]
              os: [linux, macos]
      # - unit_tests:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore: main
      # - android-build-and-test: 
      #     requires: 
      #       - unit_tests
      #     filters:
      #       branches:
      #         ignore: main
  ### PRODUCTION WORKFLOW MACOS & ANDROID ###
  production-build-test-adhoc:
    jobs:
      - build:
          filters:
            branches:
              only: main
      - unit_tests:
          requires:
            - build
          filters:
            branches:
              only: main
      - macos-build-and-test:
          requires:
            - build
          filters:
            branches:
              only: main
      - android-build-and-test: 
          requires: 
            - build
            - unit_tests
          filters:
            branches:
              only: main
      - macos-hold: 
          type: approval
          requires:
            - macos-build-and-test
          filters:
            branches:
              only: main
      - macos-adhoc:
          requires:
            - macos-hold
          filters:
            branches:
              only: main
            